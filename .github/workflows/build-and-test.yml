name: Build and Test
on:
  - push
  - pull_request
  - release
jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0
      - name: Figure out version
        id: tag
        run: |
          TAG=$(git describe --tags --abbrev=0)
          COMMITS_SINCE_TAG=$(git rev-list ${TAG}..HEAD --count)
          if [ "${COMMITS_SINCE_TAG}" -eq 0 ]; then
            echo "VERSION=${TAG}" >> $GITHUB_ENV
          else
            echo "VERSION="$(git describe --tags --abbrev=8) >> $GITHUB_ENV
          fi
      - name: Set up Python 3.8 for gcovr
        uses: actions/setup-python@v4
        with:
          python-version: 3.8
      - name: install gcovr 5.0
        run: |
          pip install gcovr==5.0 # 5.1 is not supported
      - name: SonarQube install
        uses: SonarSource/sonarqube-scan-action/install-build-wrapper@v6.0.0
      - name: Cache Conan2 dependencies
        uses: actions/cache@v3
        with:
          path: ~/.conan2
          key: ${{ runner.os }}-conan2-${{ hashFiles('**/conanfile.py') }}-${{ hashFiles('**/conandata.yml') }}
          restore-keys: |
            ${{ runner.os }}-conan2-
      - name: Install Conan
        run: pip install conan
      - name: Configure Conan Profile
        run: |
          conan profile detect -e
          conan remote add conan-nexus https://nexus.cridland.io/repository/dwd-conan --force
          conan remote login conan-nexus ci --password ${{ secrets.NEXUS_PASSWORD }}
      - name: Conan Deps Release
        run: conan install . -s build_type=Release -s compiler.cppstd=gnu23  -b missing --version=${{ env.VERSION }}
      - name: Conan Deps RelWithDebInfo
        run: conan install . -s build_type=RelWithDebInfo -s compiler.cppstd=gnu23  -b missing --version=${{ env.VERSION }}
      - name: Conan Deps Debug
        run: conan install . -s build_type=Debug -s compiler.cppstd=gnu23  -b missing --version=${{ env.VERSION }}
      - name: Configure Sonar Build
        run: mkdir sonar-build && cmake -S . -B sonar-build -DCMAKE_PROJECT_TOP_LEVEL_INCLUDES="conan_provider.cmake" -DCMAKE_BUILD_TYPE=Debug -DCONAN_INSTALL_ARGS="--settings=compiler.cppstd=gnu23;--build=missing;--version=${{ env.VERSION }}"
      - name: Build Wrapper
        run: build-wrapper-linux-x86-64 --out-dir sonar-out cmake --build sonar-build
      - name: CMake Tests
        run: cd ./test-data && ../sonar-build/test-spiffing tests.xml
      - name: Show coverage
        run: cd ./sonar-build && gcovr -r .. --gcov-ignore-parse-errors
      - name: Collate coverage
        run: cd ./sonar-build && gcovr -r .. --gcov-ignore-parse-errors --sonarqube >../coverage.xml
      - name: Sonar Scanner
        uses: SonarSource/sonarqube-scan-action@v6.0.0
        with:
          args: --define sonar.cfamily.compile-commands=sonar-out/compile_commands.json --define sonar.coverageReportPaths=coverage.xml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      - name: Create Debug package
        run: conan create . -s build_type=Debug -s compiler.cppstd=gnu23  --version=${{ env.VERSION }}
      - name: Create Release package
        run: conan create . -s build_type=Release -s compiler.cppstd=gnu23  --version=${{ env.VERSION }}
      - name: Create RelWithDebInfo package
        run: conan create . -s build_type=RelWithDebInfo -s compiler.cppstd=gnu23  --version=${{ env.VERSION }}
      - name: Conan upload
        run: conan upload -r conan-nexus --confirm 'spiffing/*'
